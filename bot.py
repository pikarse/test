import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = 'YOUR_BOT_TOKEN_HERE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
BACKEND_URL = 'http://localhost:5000/api'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏
CITIES = [
    '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
    '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ü–µ—Ä–º—å', '–í–æ—Ä–æ–Ω–µ–∂', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
    '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª', '–£–ª—å—è–Ω–æ–≤—Å–∫',
    '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ú–∞—Ö–∞—á–∫–∞–ª–∞',
    '–¢–æ–º—Å–∫', '–û—Ä–µ–Ω–±—É—Ä–≥', '–ö–µ–º–µ—Ä–æ–≤–æ', '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–†—è–∑–∞–Ω—å', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å',
    '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã', '–ü–µ–Ω–∑–∞', '–õ–∏–ø–µ—Ü–∫', '–ö–∏—Ä–æ–≤', '–ß–µ–±–æ–∫—Å–∞—Ä—ã', '–¢—É–ª–∞',
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–ö—É—Ä—Å–∫', '–£–ª–∞–Ω-–£–¥—ç', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–°–æ—á–∏', '–ò–≤–∞–Ω–æ–≤–æ',
    '–ë—Ä—è–Ω—Å–∫', '–ë–µ–ª–≥–æ—Ä–æ–¥', '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', '–í–ª–∞–¥–∏–º–∏—Ä', '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '–ß–∏—Ç–∞',
    '–ì—Ä–æ–∑–Ω—ã–π', '–ö–∞–ª—É–≥–∞', '–°–º–æ–ª–µ–Ω—Å–∫', '–í–æ–ª–æ–≥–¥–∞', '–ö—É—Ä–≥–∞–Ω', '–û—Ä—ë–ª', '–ê—Ä–º–∞–≤–∏—Ä',
    '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫', '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü', '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑', '–ú—É—Ä–º–∞–Ω—Å–∫', '–°—É—Ä–≥—É—Ç', '–í–æ–ª–∂—Å–∫–∏–π',
    '–°–∞—Ä–∞–Ω—Å–∫', '–£—Å—Å—É—Ä–∏–π—Å–∫', '–ô–æ—à–∫–∞—Ä-–û–ª–∞', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–°—ã–∫—Ç—ã–≤–∫–∞—Ä', '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫',
    '–®–∞—Ö—Ç—ã', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–û—Ä—Å–∫', '–ë–∏–π—Å–∫', '–≠–Ω–≥–µ–ª—å—Å', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–†—ã–±–∏–Ω—Å–∫',
    '–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫', '–ù–∞–ª—å—á–∏–∫', '–ë–∞–ª–∞–∫–æ–≤–æ', '–£—Ö—Ç–∞', '–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫', '–†—É–±—Ü–æ–≤—Å–∫',
    '–°—ã–∑—Ä–∞–Ω—å', '–ö–æ—Ä–æ–ª—ë–≤', '–í–ª–∞–¥–∏–º–∏—Ä', '–ú—ã—Ç–∏—â–∏', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–ê—Ä—Ç—ë–º', '–õ—é–±–µ—Ä—Ü—ã',
    '–ë–∞–ª–∞—à–∏—Ö–∞', '–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª', '–≠–ª–∏—Å—Ç–∞', '–ë–µ—Ä–¥—Å–∫', '–ù–∞—Ö–æ–¥–∫–∞', '–ê–±–∞–∫–∞–Ω', '–†—É–±—Ü–æ–≤—Å–∫',
    '–°–∞–ª–∞–≤–∞—Ç', '–£—Å—Ç—å-–ò–ª–∏–º—Å–∫', '–ú–∏–∞—Å—Å', '–ê–Ω–≥–∞—Ä—Å–∫', '–ö–æ—Ç–ª–∞—Å', '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫'
]

# –ì–µ–æ–∫–æ–¥–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
CITY_COORDINATES = {
    '–ú–æ—Å–∫–≤–∞': [55.7558, 37.6176],
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': [59.9311, 30.3609],
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': [55.0084, 82.9357],
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': [56.8519, 60.6122],
    '–ö–∞–∑–∞–Ω—å': [55.8304, 49.0661],
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': [56.2965, 43.9361],
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': [55.1644, 61.4368],
    '–°–∞–º–∞—Ä–∞': [53.2001, 50.1500],
    '–û–º—Å–∫': [54.9924, 73.3686],
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': [47.2357, 39.7015],
    '–£—Ñ–∞': [54.7388, 55.9721],
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': [56.0184, 92.8672],
    '–ü–µ—Ä–º—å': [58.0105, 56.2502],
    '–í–æ—Ä–æ–Ω–µ–∂': [51.6720, 39.1843],
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': [48.7080, 44.5133],
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': [45.0355, 38.9753],
    '–°–∞—Ä–∞—Ç–æ–≤': [51.5924, 46.0347],
    '–¢—é–º–µ–Ω—å': [57.1522, 65.5272],
    '–¢–æ–ª—å—è—Ç—Ç–∏': [53.5078, 49.4204],
    '–ò–∂–µ–≤—Å–∫': [56.8519, 53.2324],
    '–ë–∞—Ä–Ω–∞—É–ª': [53.3548, 83.7698],
    '–£–ª—å—è–Ω–æ–≤—Å–∫': [54.3176, 48.3702],
    '–ò—Ä–∫—É—Ç—Å–∫': [52.2896, 104.2806],
    '–•–∞–±–∞—Ä–æ–≤—Å–∫': [48.4802, 135.0719],
    '–Ø—Ä–æ—Å–ª–∞–≤–ª—å': [57.6261, 39.8875],
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': [43.1198, 131.8869],
    '–ú–∞—Ö–∞—á–∫–∞–ª–∞': [42.9849, 47.5047],
    '–¢–æ–º—Å–∫': [56.4977, 84.9744],
    '–û—Ä–µ–Ω–±—É—Ä–≥': [51.7727, 55.0988],
    '–ö–µ–º–µ—Ä–æ–≤–æ': [55.3904, 86.0468],
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫': [53.7945, 87.2088],
    '–†—è–∑–∞–Ω—å': [54.6269, 39.6916],
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å': [46.3588, 48.0506],
    '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã': [55.7436, 52.3958],
    '–ü–µ–Ω–∑–∞': [53.2007, 45.0046],
    '–õ–∏–ø–µ—Ü–∫': [52.6031, 39.5708],
    '–ö–∏—Ä–æ–≤': [58.6035, 49.6668],
    '–ß–µ–±–æ–∫—Å–∞—Ä—ã': [56.1322, 47.2519],
    '–¢—É–ª–∞': [54.1961, 37.6182],
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': [54.7074, 20.5072],
    '–ö—É—Ä—Å–∫': [51.7373, 36.1873],
    '–£–ª–∞–Ω-–£–¥—ç': [51.8335, 107.5841],
    '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å': [45.0428, 41.9734],
    '–°–æ—á–∏': [43.6028, 39.7342],
    '–ò–≤–∞–Ω–æ–≤–æ': [57.0004, 40.9739],
    '–ë—Ä—è–Ω—Å–∫': [53.2521, 34.3717],
    '–ë–µ–ª–≥–æ—Ä–æ–¥': [50.5977, 36.5858],
    '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫': [64.5473, 40.5602],
    '–í–ª–∞–¥–∏–º–∏—Ä': [56.1296, 40.4066],
    '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å': [44.6166, 33.5254],
    '–ß–∏—Ç–∞': [52.0515, 113.4719],
    '–ì—Ä–æ–∑–Ω—ã–π': [43.3178, 45.6949],
    '–ö–∞–ª—É–≥–∞': [54.5293, 36.2754],
    '–°–º–æ–ª–µ–Ω—Å–∫': [54.7818, 32.0401],
    '–í–æ–ª–æ–≥–¥–∞': [59.2239, 39.8839],
    '–ö—É—Ä–≥–∞–Ω': [55.4649, 65.3053],
    '–û—Ä—ë–ª': [52.9686, 36.0703],
    '–ê—Ä–º–∞–≤–∏—Ä': [44.9892, 41.1234],
    '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫': [53.6306, 55.9496],
    '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü': [59.1339, 37.9093],
    '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑': [43.0253, 44.6818],
    '–ú—É—Ä–º–∞–Ω—Å–∫': [68.9792, 33.0925],
    '–°—É—Ä–≥—É—Ç': [61.2540, 73.3962],
    '–í–æ–ª–∂—Å–∫–∏–π': [48.7975, 44.7469],
    '–°–∞—Ä–∞–Ω—Å–∫': [54.1838, 45.1749],
    '–£—Å—Å—É—Ä–∏–π—Å–∫': [43.7973, 131.9527],
    '–ô–æ—à–∫–∞—Ä-–û–ª–∞': [56.6324, 47.8842],
    '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫': [44.7239, 37.7683],
    '–°—ã–∫—Ç—ã–≤–∫–∞—Ä': [61.6748, 50.8474],
    '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫': [55.6366, 51.8245],
    '–®–∞—Ö—Ç—ã': [47.7085, 40.2159],
    '–î–∑–µ—Ä–∂–∏–Ω—Å–∫': [56.2376, 43.4599],
    '–û—Ä—Å–∫': [51.2296, 58.4751],
    '–ë–∏–π—Å–∫': [52.5186, 85.2072],
    '–≠–Ω–≥–µ–ª—å—Å': [51.4856, 46.1168],
    '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫': [50.2908, 127.5272],
    '–†—ã–±–∏–Ω—Å–∫': [58.0484, 38.8584],
    '–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫': [53.8834, 86.7193],
    '–ù–∞–ª—å—á–∏–∫': [43.4975, 43.6079],
    '–ë–∞–ª–∞–∫–æ–≤–æ': [52.0278, 47.8007],
    '–£—Ö—Ç–∞': [63.5671, 53.6835],
    '–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫': [64.5622, 39.8182],
    '–†—É–±—Ü–æ–≤—Å–∫': [51.5273, 81.2188],
    '–°—ã–∑—Ä–∞–Ω—å': [53.1586, 48.4681],
    '–ö–æ—Ä–æ–ª—ë–≤': [55.9142, 37.8255],
    '–ú—ã—Ç–∏—â–∏': [55.9104, 37.7365],
    '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫': [55.8314, 37.3315],
    '–ê—Ä—Ç—ë–º': [43.3594, 132.1884],
    '–õ—é–±–µ—Ä—Ü—ã': [55.6758, 37.8939],
    '–ë–∞–ª–∞—à–∏—Ö–∞': [55.8094, 37.9581],
    '–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª': [51.3026, 37.8417],
    '–≠–ª–∏—Å—Ç–∞': [46.3078, 44.2558],
    '–ë–µ—Ä–¥—Å–∫': [54.7551, 83.0967],
    '–ù–∞—Ö–æ–¥–∫–∞': [42.8240, 132.8925],
    '–ê–±–∞–∫–∞–Ω': [53.7156, 91.4292],
    '–°–∞–ª–∞–≤–∞—Ç': [53.3616, 55.9246],
    '–£—Å—Ç—å-–ò–ª–∏–º—Å–∫': [58.0006, 102.6619],
    '–ú–∏–∞—Å—Å': [55.0475, 60.1076],
    '–ê–Ω–≥–∞—Ä—Å–∫': [52.5448, 103.8884],
    '–ö–æ—Ç–ª–∞—Å': [61.2540, 46.6333],
    '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫': [61.7849, 34.3469],
    '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫': [53.6306, 55.9496]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
def create_city_keyboard():
    builder = InlineKeyboardBuilder()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(CITIES), 3):
        row = []
        for j in range(3):
            if i + j < len(CITIES):
                city = CITIES[i + j]
                row.append(InlineKeyboardButton(
                    text=city,
                    callback_data=f"city_{city}"
                ))
        builder.row(*row)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å WebApp
def create_webapp_keyboard(city):
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
    coords = CITY_COORDINATES.get(city, [55.7558, 37.6176])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞
    
    webapp_button = InlineKeyboardButton(
        text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
        web_app=WebAppInfo(url=f"http://localhost:8080/webapp/index.html?city={city}&lat={coords[0]}&lng={coords[1]}")
    )
    
    back_button = InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º",
        callback_data="back_to_cities"
    )
    
    builder.row(webapp_button)
    builder.row(back_button)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞—Ä—Ç—ã –†–æ—Å—Å–∏–∏!

üó∫ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ç–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –º–µ—Ç–∫–∞–º

üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:
"""
    
    await message.answer(welcome_text, reply_markup=create_city_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üó∫ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É"
3. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É
4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥
5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –º–µ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ—Å—Ç–∞
‚Ä¢ –û—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥

üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–∫–∞–º
‚Ä¢ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∏–¥–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ú–µ—Ç–∫–∏ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏
‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫
"""
    
    await message.answer(help_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/stats") as response:
                if response.status == 200:
                    stats = await response.json()
                    
                    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç—ã –†–æ—Å—Å–∏–∏:</b>

üìç –í—Å–µ–≥–æ –º–µ—Ç–æ–∫: <b>{stats['total_markers']}</b>
üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>{stats['total_comments']}</b>
‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{stats['average_rating']:.1f}/5</b>

üèô <b>–ì–æ—Ä–æ–¥–∞ —Å –º–µ—Ç–∫–∞–º–∏:</b>
{', '.join(stats['cities'][:10])}{'...' if len(stats['cities']) > 10 else ''}
"""
                    
                    await message.answer(stats_text, parse_mode="HTML")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data.startswith('city_'))
async def process_city_selection(callback: types.CallbackQuery):
    city = callback.data.replace('city_', '')
    
    city_info = f"""
üèô <b>{city}</b>

üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {CITY_COORDINATES.get(city, ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'])}
üó∫ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –≥–æ—Ä–æ–¥–∞
"""
    
    await callback.message.edit_text(
        city_info,
        parse_mode="HTML",
        reply_markup=create_webapp_keyboard(city)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º"
@dp.callback_query(lambda c: c.data == "back_to_cities")
async def process_back_to_cities(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=create_city_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message(lambda message: message.web_app_data is not None)
async def process_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        
        if data.get('action') == 'marker_added':
            marker_info = data.get('marker', {})
            
            response_text = f"""
‚úÖ <b>–ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üìç –ú–µ—Å—Ç–æ: {marker_info.get('comment', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {marker_info.get('rating', 0)}/5
üèô –ì–æ—Ä–æ–¥: {marker_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üó∫ –ú–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ –∫–∞—Ä—Ç–µ!
"""
            
            await message.answer(response_text, parse_mode="HTML")
            
        elif data.get('action') == 'comment_added':
            comment_info = data.get('comment', {})
            
            response_text = f"""
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üìù –¢–µ–∫—Å—Ç: {comment_info.get('comment', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {comment_info.get('rating', 0)}/5

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!
"""
            
            await message.answer(response_text, parse_mode="HTML")
            
        else:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 